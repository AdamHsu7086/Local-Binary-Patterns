`timescale 1ns/10ps
module LBP (clk, reset, gray_addr, gray_req, gray_ready, gray_data, lbp_addr, lbp_valid, lbp_data, finish);
input clk;
input reset;
output reg [13:0] gray_addr; //0-16383
output reg gray_req; //keeping high
input gray_ready;
input [7:0] gray_data;
output reg [13:0] lbp_addr; //less grayaddr than 129
output reg lbp_valid; //when lbpaddr >= 129 get high
output reg [7:0] lbp_data;
output reg finish;

reg [7:0] data0 [0:127];
reg [7:0] data1 [0:127];
reg data_count; //判斷gray_data給data0 or data1值//判斷data0 or data1給data_add值
reg mode; //6種//gray_addr >= 258開始//data_count = 0時mode為012循環//data_count = 1時為345循環
reg [6:0] count;//0-127
reg [6:0] lbp_count;
reg [7:0] com0 ,com1 ,com2 ,com3 ,com4 ,com5 ,com6 ,com7 ,com8;


always @(gray_addr) begin //data_count
    if(gray_addr <= 127)
        data_count = 0;
    else if(gray_addr[6:0] == 0)
        data_count = data_count + 1;
end

always @(posedge clk) begin //data
    if(data_count == 0 && gray_req == 1)
        data0[count] <= gray_data;
    else if(data_count == 1 && gray_addr >= 127)
        data1[count] <= gray_data;
end

always @(posedge clk) begin //com
    if(data_count == 0)begin
        com2 <= data0[count];
        com1 <= com2;
        com0 <= com1;
        com5 <= data1[count];
        com4 <= com5;
        com3 <= com4;
        com8 <= gray_data;
        com7 <= com8;
        com6 <= com7;
    end
    else if(data_count == 1)begin
        com2 <= data1[count];
        com1 <= com2;
        com0 <= com1;
        com5 <= data0[count];
        com4 <= com5;
        com3 <= com4;
        com8 <= gray_data;
        com7 <= com8;
        com6 <= com7;  
    end
end

always @(posedge clk) begin //lbp_data
    if(lbp_addr <= 127 || lbp_addr >> 7 == 127 || count == 1 || count == 2)
        lbp_data <= 0;
    else if(lbp_valid == 1)begin
        lbp_data[0] <= (com0 >= com4 ? 1 : 0);
        lbp_data[1] <= (com1 >= com4 ? 1 : 0);
        lbp_data[2] <= (com2 >= com4 ? 1 : 0);
        lbp_data[3] <= (com3 >= com4 ? 1 : 0);
        lbp_data[4] <= (com5 >= com4 ? 1 : 0);
        lbp_data[5] <= (com6 >= com4 ? 1 : 0);
        lbp_data[6] <= (com7 >= com4 ? 1 : 0);
        lbp_data[7] <= (com8 >= com4 ? 1 : 0);
    end
end

always@(posedge clk or posedge reset)begin //gray_req
    if(reset)
        gray_req <= 0;
    else if(lbp_addr >= 16253)
        gray_req <= 0;
    else if(gray_ready == 1)
        gray_req <= 1;
    else
        gray_req <= 0;
end 

always@(posedge clk) begin //gray_addr
    if(reset)
        gray_addr <= 0;
    else if(gray_addr == 16383)
        gray_addr <= 16383;
    else if(gray_req == 1)
        gray_addr <= gray_addr + 1; 
    else
        gray_addr <= 0;
end

always @(posedge clk) begin //count
    if(reset)
        count <= 0;
    else if(gray_req == 1)
        count <= count + 1;
end

always @(posedge clk or posedge reset) begin //lbp_valid
    if(reset)
        lbp_valid <= 0;
    else if(gray_addr >= 130)
        lbp_valid <= 1;
    else
        lbp_valid <= 0;
end

always @(posedge clk or posedge reset) begin //lbp_addr
    if(reset)
        lbp_addr <= 0;
    else if(lbp_valid == 1)
        lbp_addr <= lbp_addr + 1;
    else
        lbp_addr <= 0;
end

always @(posedge clk or posedge reset) begin //lbp_addr
    if(reset)
        lbp_count <= 0;
    else if(gray_addr >= 130)
        lbp_count <= lbp_count + 1;
    else
        lbp_count <= 0;
end

always @(posedge clk or posedge reset) begin //finish
    if(reset)
        finish <= 0;
    else if(lbp_addr >> 7 == 127)
        finish <= 1;
    else
        finish <= 0;
end

endmodule
